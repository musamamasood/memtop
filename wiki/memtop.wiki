#summary Displays memory consumption of processes in easy to read way.

= Introduction =

Python script for linux. Intended to help with diagnose and identification which processes uses most of RAM of PC.

Typical situation is when you need to reduce RAM usage of your box or you want to monitor your system for longer period of time to find out misbehaving applications. 

The script calculates amount of private/writeable for each process (using /proc/$PID/maps files) and prints biggest ones. It completely ignores private/non-writeable and shared memory. The reasons are:

  * shared memory is hard to interpret and at the end you still can not say 'how much memory is proces x taking'.
  * when tracking memory use of a process over time, private/writeable memory is most iteresting portion of process's memory use. Memtop will help you to find out how it changes over time. Also keep in mind that problems like memory leaks will be shown just in this number...
  * private/writeable memory is supposed to be an amount that will be freed in 'memory' (here the term includes both: RAM and swap) when process terminates
  * there are other tools to show this kind of info (shared memory use), so there is no need to have it included also here


In addition to pure listing of processes and their memory use, it can track memory use in general way and help you identify periods when your system is short of RAM and how bad it is. For more info, scroll down to "Additional memory utilization info" section.



<br>

== Example of output ==
One example is better then ten lines of description
{{{
   PID |   private/writ. mem |  command                       22:44:38
       |  current | previous | (truncated)           (waiting 15 min.)
  3343 | 111.9 MB |          | /usr/lib/opera/9.62/opera-styleskulptu
  3283 |  19.8 MB |    ++    | /usr/bin/plasma
  7078 |  18.7 MB |    +     | /usr/bin/pcmanfm
  3292 |  12.4 MB |          | kxkb
  3278 |  11.0 MB |          | ksmserver
  7737 |   9.0 MB |    +++   | python/home/johny/programs/mtvcgui/trun
  3280 |   8.0 MB |    +     | kwin
  3272 |   6.5 MB |          | kded4
  4556 |   3.4 MB |          | /usr/lib/opera/9.62//operapluginwrapper
       RAM usage: |===================    77.6 %

   PID |   private/writ. mem |  command                       22:59:41
       |  current | previous | (truncated)           (waiting 15 min.)
  3343 | 111.9 MB |          | /usr/lib/opera/9.62/opera-styleskulptu
  7078 |  26.9 MB |    +++   | /usr/bin/pcmanfm
  3283 |  19.8 MB |          | /usr/bin/plasma
  3292 |  12.4 MB |          | kxkb
  3278 |  11.0 MB |          | ksmserver
  7737 |   9.0 MB |          | python/home/johny/programs/mtvcgui/trun
  3280 |   8.0 MB |          | kwin
  3272 |   6.5 MB |          | kded4
  4556 |   3.4 MB |          | /usr/lib/opera/9.62//operapluginwrapper
       RAM usage: |====================    78.4 %

   PID |   private/writ. mem |  command                       23:14:44
       |  current | previous | (truncated)           (waiting 15 min.)
  3343 | 111.1 MB |   -      | /usr/lib/opera/9.62/opera-styleskulptu
  7078 |  26.9 MB |          | /usr/bin/pcmanfm
  3283 |  19.8 MB |          | /usr/bin/plasma
  3292 |  12.4 MB |          | kxkb
  3278 |  11.0 MB |          | ksmserver
  7737 |   9.0 MB |          | python/home/johny/programs/mtvcgui/trun
  3280 |   8.0 MB |          | kwin
  3272 |   6.5 MB |          | kded4
  4556 |   3.4 MB |          | /usr/lib/opera/9.62//operapluginwrapper
       RAM usage: |====================    78.1 %
}}}

This example shows "graph" mode, and here the third column "previous" indicates change against previous iteration. It is just to visualise what program (its RAM occupation) is growing or shrinking.

<br>

== Use ==

No installation is needed, just run the script. Available parameters are

|| -p $integer   ||wait time between iterations (in minutes)||
||-s graph|numb||two alternatives how to present mainly data from former iteration||
|| -l $integer||number of lines - processes to show||
||-m ||more info about memory utilization (since 0.9.4)||
||-h||help||



Important note: The script should be *run as root* or you will not get data for processes running under other users.

<br>

== Additional memory utilization info, introduced from 0.9.4 ==

From this release you can use swith "-m" / "-more" to get two additional lines:

{{{
# python3 memtop-0.9.5.py -m -p 2 -l 2

   PID |   private/writ. mem |command                        09 Mar 08:30:42
       |  current |  change  |(might be truncated)          (waiting 2 min.)
  5801 | 291.6 MB |  --      |/usr/lib/iceweasel/firefox-bin                
 11457 | 182.6 MB |          |gimp                                          
   Writeable/RAM: =========================  90.7%
   RAM use without cached pages: 48.7% , SWAP use: 32.7%
   Swapping: 0.1 / 0.0, Paging: 0.7 / 31.1 (in/out / sec / period)
}}}

While "writeable" information can be used to track memory use of single processes, especially memory leaks and so, "RAM use without cached pages" gives single number of your physical RAM utilization. It based on /proc/meminfo and consideres three lines:

  * Memtotal - as size of your RAM
  * Memfree  - as free portion of RAM
  * Cached   - "...in-memory cache for files read from the disk..." - this portion of RAM is not reported as free (not included in MemFree) but due to the character of data, kernel can drop stored data immediately and use freed capacity as needed

To calculate SWAP use it uses Swaptotal & Swapfree lines from /proc/meminfo.

Second new line and last one in the example is about swapping & paging. This information doesn't say "How full your RAM is" but monitors symptoms of RAM shortage. 


<br>

== Loging + graphs generation (from 0.9.6) ==

From 0.9.6 you can use swith -L/--log that will create file memtop.log in current directory, with content like:

{{{
##Date     time   writeable ramuse swapuse
04/04/2012 14:24    98.9    57.8   19.3
04/04/2012 14:25    99.0    59.0   19.3
04/04/2012 14:26    98.8    58.2   19.3
04/04/2012 14:27    98.9    59.0   19.3
04/04/2012 14:28    98.9    58.1   19.3
}}}

The columns are: writeable/RAM; RAM use / total RAM, SWAP use / total swap. (exactly the same numbers you see in console output)



With memtop-graph.pg script (see download section, gnuplot needed) you can create graphs from the memtop.log (must be in same directory)

{{{
   $ ./memtop-graph.pg > anyname.png    
}}}

and you can get image like this (the drop ocured when I turned off the firefox). 

http://memtop.googlecode.com/files/memtop-graph.png

DISCLAIMER: Memtop version 0.9.6 and memtop-graph.pg version 1 are development versions.

<br>

== Changes after 0.9.0 ==

After some three years I resumed my work on this tool, I "ported" it to python3 (still working with version 2.7 at least) and fixed problems when grepping its output. Sometimes it did not get through pipe at all (I dont understand why) but the main problem was that the grep command used to return error "Binary file matches". It showed that names of listed programs contained binary characters, not visible in console but still affecting grep.
Also I added info about swapping/pagging (see above) and made couple of cosmethic enhancements and internall house-keeping of the code.

<br>

**Any comments welcomed!!!**